## 27. Update Notifications

As the community was figuring out how to financially support their WordPress activities, there were also changes going to how the project was run. In July 2007, Peter Westwood[ Check if Westi would prefer to be referred to as Peter or Westi] was added as a core committer, bringing the number of people who could commit code to the repository to four. Peter had been involved in the project since 2004, when he had written a script that downloaded WordPress and installed it on a server. He was working in software engineering when he first encountered the WordPress project. After writing his script he ended up helping out with the Codex then moved on to finding and fixing bugs. Like many of the other developers, he had little experience of PHP when he came to the project.


It was also around this time that questions started to be asked about the usefulness of a project staple - wp-hackers. The wp-hackers mailing list was in to its third year. As WordPress grew in its user and developer base, more and more people were attracted to the project. Less productive discussion was happening on wp-hackers, and more of the decision making was happening elsewhere. For example, in February 2007 [Ryan integrated phpmailer with WordPress](https://core.trac.wordpress.org/ticket/3862). A short discussion happened on WordPress Trac (WordPress’ bug tracking software) and the code was committed. It wasn’t until September that year that a [discussion about PHPMailer happened on wp-hackers](http://lists.automattic.com/pipermail/wp-hackers/2007-September/014497.html), a discussion that most of the lead developers absented themselves from.

Often the discussion focused not so much on producing software but fell into [meta-discussion about the mailing list](http://lists.automattic.com/pipermail/wp-hackers/2007-September/015058.html) itself, about the [high signal to noise ratio](http://lists.automattic.com/pipermail/wp-hackers/2007-September/015173.html), and about how to [improve mailing list etiquette](http://lists.automattic.com/pipermail/wp-hackers/2007-October/015489.html. 	
Some developers took to their own blogs to outline their concerns with wp-hackers. [Andy Skelton wrote](http://andy.wordpress.com/2007/10/03/wp-hackers/):	

> There is just one thing I want to make clear about wp-hackers: a hacker is not someone who discusses or pays lip service or dissents or casts a vote or says what can or should be done. Hackers aren’t committee members. Hackers are more interested in proving what can be done than arguing about it.	
This highlighted one of the major problems with wp-hackers. There was too much discussion of code and not enough writing of code, too much opinion and not enough fact. Over time, a mailing list can often become dominated by people who have time to comment, rather than those focused on carrying out their work. Those who don’t have time to comment are the people who you most want to hear from, but they’re usually too busy to keep up with a high-traffic mailing list. Mailing lists have the potential to be a time-suck, with a tendency to descend into long arguments driven by people with the time to contribute to such arguments, and drag those who don’t have time into flame wars.	
WordPress isn’t alone in this phenomena. A [2013 study of the Apache Lucene mailing list](http://sback.it/publications/msr2013.pdf) found that “although the declared intent of development mailing list communication is to discuss project internals and code changes/additions, only 35% of the email threads regard the implementation of code artefacts.” As well as discussing development, the mailing list often strayed into discussion of social norms and behaviour. Significantly, the study also found that project developers participate in less than 75% of the discussion and start only half of the discussions. The study also found that developers prefer to communicate on the issue tracking software, a finding that is borne out in WordPress as developers took their discussion from the mailing list to WordPress trac. 	



Another pitfall of a mailing list such as wp-hackers is the tendency to descend into bikeshed discussions. In his book, [Producing Open Source Software](http://producingoss.com/), Karl Fogel reprints [an email from Poul-Henning Kamp](http://bikeshed.com/) to the FreeBSD mailing list with the title “A bike shed (any colour will do) on greener grass…” In the email Kamp gives an example from [Parkinson’s Law of triviality](https://en.wikipedia.org/wiki/Parkinson%27s_law_of_triviality):	
> Parkinson shows how you can go in to the board of directors and get approval for building a multi-million or even billion dollar atomic power plant, but if you want to build a bike shed you will be tangled up in endless discussions.	
This is because the atomic plant is so vast that only very few people can grasp it, and the board of directors assume that somebody has the knowledge and has done the groundwork. In contrast, anyone can build a bike shed, so everyone will have an opinion on how it should be built, and, more specifically in open source discussions, what color it should be.

There is a tendency for software mailing lists and forums, over time, to descend into bike shed discussions. As the technical difficulty of an issues goes down, the “[probability of meandering goes up](http://producingoss.com/en/producingoss.html#bikeshed).” If a discussion is highly technical it can be difficult for everyone to follow along, but there are other discussions in which everyone can have a say. 	
[From _Producing Open Source Software_](http://producingoss.com/en/producingoss.html#bikeshed)	
> consensus is hardest to achieve in technical questions that are simple to understand and easy to have an opinion about, and in "soft" topics such as organization, publicity, funding, etc. People can participate in those arguments forever, because there are no qualifications necessary for doing so, no clear ways to decide (even afterward) if a decision was right or wrong, and because simply outwaiting other discussants is sometimes a successful tactic.	
With the fast rate of growth of its community and its low barrier to entry, the WordPress project has been as susceptible to bike shed discussions as any other open source project. A [Google search for “bikeshed” on the wp-hackers mailing list](https://www.google.com/search?q=site%3Ahttp%3A%2F%2Flists.automattic.com%2Fpipermail%2Fwp-hackers%2F+bikeshed&oq=site%3A&aqs=chrome.2.69i57j69i58j69i59j69i65l3.2535j0j4&sourceid=chrome&es_sm=91&ie=UTF-8#q=site:http:%2F%2Flists.automattic.com%2Fpipermail%2Fwp-hackers%2F+bikeshed&safe=off) displays a number of discussions in which a respondent has cried “bike shed”, as does a [similar search on trac](https://core.trac.wordpress.org/search?q=bikeshed&noquickjump=1&changeset=on&ticket=on).	
There is an example from 2007, when discussion about what to call Links got heated. A [poster to wp-hackers asked](http://lists.automattic.com/pipermail/wp-hackers/2007-June/013299.html) “Anyone know why it's still called Blogroll in admin, when it's called Bookmarks in functions (wp_list_bookmarks) and yet displays by default as a list of "Links" in the sidebar?” The original post, entitled Blogroll, Bookmarks, Links, generated a total of 79 emails, and discussion spilled over from the mailing list and [on to a trac ticket](https://core.trac.wordpress.org/ticket/3695).	


Of course, one person’s bike shed is another person’s bête noire, and there were times that wp-hackers flared up with issues that the community felt out to be taken seriously. One such instance occurred in early September 2007, prior to the release of WordPress 2.3, which contained the update notification system, which notified users when a new version of WordPress or of a plugin was available for install. [The system](https://core.trac.wordpress.org/ticket/1476) collected data from a user’s site and sent it back to http://api.wordpress.org. The data collected was the WordPress version, PHP version, locale setting, and the website’s URL. A [further piece of code](https://core.trac.wordpress.org/changeset/5913) carried a [plugin update check](https://core.trac.wordpress.org/ticket/4795), which sent the website’s URL, WordPress version, and plugin info (including inactive plugins) to api.wordpress.org.	

Some felt that this type of data collection was contrary to the ethos of a FOSS project. They thought that [collecting the blog URL was unnecessary](http://lists.automattic.com/pipermail/wp-hackers/2007-September/014860.html). Others had no problem with WordPress collecting the data, but were [unhappy that WordPress was not disclosing it](http://lists.automattic.com/pipermail/wp-hackers/2007-September/014919.html). A ticket was opened on WordPress trac to [request that update checking be anonymised](https://core.trac.wordpress.org/ticket/5066). A number of people who didn’t oppose the changes still felt that there should be an opt-out option so that users who required complete privacy would be able to turn off the data collection.

This debate goes to the heart of one of the design philosophies in WordPress: “decisions, not options”. This is heavily influenced by a [2002 article written by Gnome contributor Havoc Pennington](http://ometer.com/free-software-ui.html). The problem with many FOSS user interfaces is that they often have a huge number of options so that they can be set up in as many different configurations as possible. If there is an argument in a community about whether something should or shouldn’t be added, an apparently easy solution is to simply add an option. However, the more options one adds, the more unwieldy a user interface becomes. In his article, Pennington writes” preferences have a cost [..], each one has a price and you have to consider its value.” He outlines the problems that a proliferation of options causes:
- When there are too many preferences it’s difficult for a user to find them
- They can damage QA and testing. Some bugs only happen when a certain configuration of options are selected
- They make creating a good UI difficult
- They keep people from fixing real bugs - some software projects add options that are just there to fix bugs
- They can confuse users
- The space that you have for preferences is finite so fill it wisely

In adhering to these ideas, the developers of WordPress always try to think carefully introducing a new option and they have become more refined at this over time. By the time the question arose about data collection, they were extremely reluctant to introduce new options. [Peter posted to the wp-hackers thread](http://lists.automattic.com/pipermail/wp-hackers/2007-September/015119.html):	
> One of the core design ideas for WordPress is that we don't introduce options lightly. The moment you think of making a feature optional you challenge the argument for introducing the feature in the beginning.

What benefit would an opt-out button for update notifications provide to users? The purpose of the notifications was to inform a user that a new version of WordPress, or a plugin, was a available for them into install. This would help to ensure that users’ websites stay up-to-date and secure. Adding an option to opt-out of update notifications would only reduce the number of people who were updating their sites, and increase the number of insecure instances of WordPress. The benefit to adding the option didn’t outweigh the cost. 

Therefore, despite the extensive discussion on wp-hackers, [WordPress 2.3 was launched as planned](http://wordpress.org/news/2007/09/wordpress-23/), with the following note in the announcement post:	
	> Our new update notification lets you know when there is a new release of WordPress or when any of the plugins you use has an update available. It works by sending your blog URL, plugins, and version information to our new api.wordpress.org service which then compares it to the plugin database and tells you whats the latest and greatest you can use.

There was also posted a [first version of a privacy policy on WordPress.org](http://lists.automattic.com/pipermail/wp-hackers/2007-September/015014.html).	




The following year, they did it all over again, and September 2007 saw the first WordCamp outside of San Francisco - WordCamp Beijing.	

This started a trend of WordPress users and community members getting together all over the world. The number of WordCamps has grown exponentially, and every year new WordCamps are set up in diverse countries Japan, Brazil, Kenya, India, the Netherlands, and Russia.	

Just prior to the release of WordPress 2.3, there were some big changes to the way that the project was structured, when both [Peter Westwood and Mark Jaquith were lead developers](https://wordpress.org/news/2007/09/new-faces/). The announcement post describes them as “a few old faces who are taking on bigger roles in the community” Both committers at the time, they became lead developers at the behest of Ryan Boren, who felt that their contributions went beyond code contributions to more of a leadership role. Both had been active in many of the discussions that had happened in the community. They both, for example, opposed Matt’s proposal for the taxonomy structure, and Mark was one of the people to voice concerns over data collection in WordPress 2.3.	

They brought new perspectives to the project’s leadership. The announcement post talks about Mark’s passion for people using WordPress to express themselves in parts of the world where freedom is suppressed, and Peter’s background in software engineering. With two new lead developers, the funnel was broadened even further, not just in terms of committing to the codebase but also to help with guiding and shaping the project. 	
