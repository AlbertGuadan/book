## 20. Development Challenges

As the project grew and attracted more people it started to experience growing pains. This isn’t uncommon for any organisation, but especially for bazaar-style communities in which everyone is encouraged to participate and have a voice. Every FOSS experiences conflict but in the end what matters isn’t the specifics of that conflict but how the conflict is resolved and how the project moves on from it. Many of the problems within the WordPress project come down to a few broad issues: different approaches to development and community building, communication, and differences of emphasis about who the software is for - users or developers, for example, or users and business owners. These are the fault lines along which many issues in the project have arisen and each of them has different results.

While work was happening on the Shuttle project, there were members of the wider community that the work was going on behind closed doors. They felt cut out of an important part of the development process. This would compounded by the fact that there was no clarity about what the Shuttle group was and what they were responsible for. Some people were convinced that the Shuttle group was redesigning the admin while the rest of the community were cut out of it, whereas [Matt's view on it], on the other hand, was (http://lists.automattic.com/pipermail/wp-hackers/2005-June/001417.html) "Shuttle is a few designers who throw photoshop comps back and forth to each other."

The foremost person who was irked about the process was WordPress co-founder Mike Little. In June 2005, [changes were checked in to the write screen](https://core.trac.wordpress.org/changeset/2639) that implemented new pods functionality, enabling users to collapse and expand meta boxes on the screen. The changes weren't discussed ahead of time on wp-hackers or IRC, just on the closed wp-design mailing list. This precipitated a long discussion on wp-hackers about [openness in the project](http://lists.automattic.com/pipermail/wp-hackers/2005-June/001403.html). While Matt intended the commit to be a discussion point, it was perceived to be a wholesale change made without discussion. Many people in the community felt that discussion should have happened ahead of the commit, or that the community should have at least been informed that the user interface design had been delegated to the Shuttle group. That was, after all, how an open source project should work. 

The issue was discussed in the [WordPress IRC chat room](http://codex.wordpress.org/IRC_Meetups/2005/June/June29RawLog). The openness issue was seen to stem from the fact of only Matt and Ryan having commit access. All issues had to go through them. Discussions were had about how to make the process more open.  As a result both Mark Jaquith and Sean Evans (morydd) were made bug gardeners and given maximum privileges on trac. 

Another area where there was heated debated was around the issues of inline documentation. There was strong support in the community to improve WordPress' inline documentation. For many developers, digging into the code is the best learning tool that they have. In February 2006, Rich Bowen ([drbacchus](https://profiles.wordpress.org/drbacchus) proposed [that he document WordPress' functions](http://lists.automattic.com/pipermail/wp-hackers/2006-February/004921.html) and asked if there was a philosophical objection to having inline documentation.  [The response was that](http://lists.automattic.com/pipermail/wp-hackers/2006-February/004926.html) it was frowned upon because it would lead to bloat. He referred to a thread from May 2005, [which said](http://lists.automattic.com/pipermail/wp-hackers/2005-May/001114.html):

> Commenting is tricky. Some "well-commented" code I've seen had a bunch  of lines of repetitive filler that "documented" what you could easily see by just looking at the code itself and doubled the size of the program. APIs should be documented religiously, but I think spending a ton of time on redundant comments for code only a few core hackers will ever look at will bloat the codebase and waste everyone's time. I also  believe that well-written code usually doesn't need comments unless it's doing some sort of voodoo or workaround.

The proposal, however, had wide support across the community, with some developers offering to [take on the labour themselves](http://lists.automattic.com/pipermail/wp-hackers/2006-February/005084.html). Rich's initial proposal started a long discussion about the best way to generate documentation from the code and the best format for inline documentation, but it was [ultimately didn’t go anywhere.](http://lists.automattic.com/pipermail/wp-hackers/2006-February/005088.html) At that time, Matt argued that documentation shouldn't be auto-generated, pointing to the Codex as the best place for documentation.

Over the coming months there [continued to be support for inline documentation in the community](http://lists.automattic.com/pipermail/wp-hackers/2006-March/005481.html). [Tickets were opened but left ignored](http://core.trac.wordpress.org/ticket/2473), and Owen Winkler created his own [developer function reference](http://lists.automattic.com/pipermail/wp-hackers/2006-April/005534.html)

![Owen Winkler's Function Reference](../../Resources/images/chapter-6/winkler_fn_ref.jpg "Winkler function reference")

The squashing of the inline docs proposal made many community members. Scott Merrill ([Skippy](http://profiles.wordpress.org)) wrote a long post on the wp-forums mailing list, [in which he outlined his issues with the project](http://codex.wordpress.org/IRC_Meetups/2006/February/February22RawLog). The docs at that time, were not in a good condition. After the first flurry of activity on the docs mailing list, activity died down and some months saw [barely any posts at all](http://lists.automattic.com/pipermail/wp-docs/2006-May/thread.html). The documentation did continue to grow but in a haphazard and messy way. Using a poorly-managed wiki as a host for documentation that should be inline would only make matters worse. 

The issues around documentation weren't limited to inline documentation. Mark Riley (Podz) one of WordPress' longstanding forum moderators, [pointed out in 2006](http://lists.automattic.com/pipermail/wp-forums/2006-March/001530.html) that the WordPress Codex was failing users. For example, it was [recommended on the Codex](http://codex.wordpress.org/index.php?title=Hardening_WordPress&oldid=16988) that users hide which version of WordPress they were running, but the code itself contained a comment asking users to leave the information for statistical purposes. Mark also complained that the content in the Codex meant nothing to WordPress users. He cites the section on permissions which said "All files should be owned by your user account, and should be writable by you. Any file that needs write access from WordPress should be group-owned by the user account used by the webserver." WordPress has a low barrier to entry for users, but the documentation that came with it wasn't easy enough for them to understand.


These discussions highlighted tensions under the surface of the project. Once of these tensions was around the relationship between developers and non-developers. These were perhaps inevitable given WordPress' low barrier to entry. It encouraged people from all sorts of backgrounds to get involved with the project but the developers weren’t always interested in supporting them. This chimes with the open source do-it-yourself attitude. Many developers in the project were self taught - if they could get to grips with the intricacies of PHP why couldn’t others? The relationship between the developers and the support team is played out on the wp-hackers mailing list. Again and again, Mark Riley posts questions that come up on the support forums to try and get help from developers. There is a sense of frustration as he tries to get the answers from the developers that the users need.

A clear fault line was around release dates. Almost every release cycle, Mark made a request asking to be informed in advance the release date so that he could ensure that the support forums were properly manned when the new version came out. Again and again, a release would arrive with him unaware of it. "All I am trying - and yet again complete failing - to ask,"  [he asked on the mailing list](http://lists.automattic.com/pipermail/wp-hackers/2006-March/005310.html) "is that IF you want support for the product it would nice to at least let the forums know. You guys just don't see it do you? You really don't have a clue."

Another tension was between those from a traditional coding background and those from the self-taught hacker background that so much embodies the WordPress culture. While the line isn’t clear-cut, many of the original WordPress developers were entirely self taught. The get-it-on-the-screen approach started by Michel in b2 continued to filter down through the project, often at the expense of coding practices that more experienced developers would take for granted. Inline documentation was seen by some as superfluous to writing code, considered even to be bloat as it increased the file size. It would take some time before it became standard practice in the WordPress community, though when it did there were community members who really pushed to get WordPress completely documented. 